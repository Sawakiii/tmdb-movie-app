{"version":3,"sources":["MovieDetail.js","DetailPage.js","App.js","serviceWorker.js","index.js"],"names":["MovieDetail","props","movie","title","src","poster_path","alt","overview","DetailPage","movies","setMovies","API_KEY","React","useEffect","fetch","then","res","json","console","log","results","onSubmit","e","preventDefault","target","searchInput","value","handleSearch","type","name","map","i","to","id","path","render","App","useState","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAiBeA,EAdK,SAACC,GACjB,OACI,oCACI,sCACA,4BAAKA,EAAMC,MAAMC,OACjB,yBAAKC,IAAK,kCAAoCH,EAAMC,MAAMG,YAAaC,IAAI,KACzE,2BAAIL,EAAMC,MAAMK,UAClB,kBAAC,IAAD,QCgEGC,EAtEI,SAACP,GAElB,IAAMQ,EAASR,EAAMQ,OACfC,EAAYT,EAAMS,UAKlBC,EAAU,mCAGhBC,IAAMC,WAAU,WACdC,MAAM,qDAAD,OAAsDH,EAAtD,yDACJI,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GACJE,QAAQC,IAAIH,EAAII,SAChBV,EAAUM,EAAII,cAEf,IAmBH,OACE,oCAEE,0BAAMC,SAAU,SAACC,IAlBA,SAACA,GACpBA,EAAEC,iBACFT,MAAM,qDAAD,OAAsDH,EAAtD,iCAAsFW,EAAEE,OAAOC,YAAYC,MAA3G,gCACJX,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GACJE,QAAQC,IAAIH,EAAII,SAChBV,EAAUM,EAAII,YAYQO,CAAaL,KACjC,2BAAOM,KAAK,OAAOC,KAAK,gBACxB,4BAAQD,KAAK,UAAb,iBAGF,4BACInB,EAAOqB,KAAI,SAAC5B,EAAO6B,GACnB,OACE,4BACE,kBAAC,IAAD,CAAMC,GAAE,WAAM9B,EAAM+B,KAAO/B,EAAMC,OAOjC,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO+B,KAAK,OAAOC,OAAQ,SAAClC,GAAD,OAAS,kBAAC,EAAD,CAAaC,MAAOA,QAExD,yBAAKE,IAAK,kCAAoCF,EAAMG,YAAaC,IAAI,KACrE,2BAAIJ,EAAMK,iBC3CT6B,EAdH,WAAO,IAAD,EACYxB,IAAMyB,SAAS,IAD3B,mBACT5B,EADS,KACDC,EADC,KAEhB,OACE,oCACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO4B,OAAK,EAACJ,KAAK,IAAIC,OAAS,SAAAlC,GAAK,OAAE,kBAAC,EAAD,CAAaQ,OAAQA,EAAQC,UAAWA,UCAhE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.0ed10f04.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst MovieDetail = (props) => {\r\n    return (\r\n        <>\r\n            <h1>aaaaaa</h1>\r\n            <h1>{props.movie.title}</h1>\r\n            <img src={\"https://image.tmdb.org/t/p/w185\" + props.movie.poster_path} alt=\"\"/>\r\n              <p>{props.movie.overview}</p>\r\n            <Link></Link>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MovieDetail","import React from \"react\"\r\nimport { Link, Route, BrowserRouter } from \"react-router-dom\"\r\nimport MovieDetail from \"./MovieDetail\"\r\n\r\nconst DetailPage = (props) => {\r\n  // 映画データの定義\r\n  const movies = props.movies\r\n  const setMovies = props.setMovies\r\n\r\n  // 検索ワードをstateにする必要はない\r\n\r\n  // APIキーを格納\r\n  const API_KEY = \"11474ff130f2d229944829565a279ac3\"\r\n\r\n  // デフォルトで表示される映画dieで検索している\r\n  React.useEffect(()=>{\r\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=die&page=1&include_adult=false`)\r\n    .then(res=>res.json())\r\n    .then(res=>{\r\n      console.log(res.results)\r\n      setMovies(res.results)\r\n    })\r\n  }, [])\r\n\r\n\r\n  // 検索機能\r\n  const handleSearch = (e) => {\r\n    e.preventDefault()\r\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${e.target.searchInput.value}&page=1&include_adult=false`)\r\n    .then(res=>res.json())\r\n    .then(res=>{\r\n      console.log(res.results)\r\n      setMovies(res.results)\r\n    })\r\n  }\r\n  \r\n  // ページ切替機能\r\n\r\n  // 詳細を見る機能 押すと全体が\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* 検索ボタン */}\r\n      <form onSubmit={(e)=>{handleSearch(e)}}>\r\n        <input type=\"text\" name=\"searchInput\" />\r\n        <button type=\"submit\">検索</button>\r\n      </form>\r\n      {/* 検索結果を表示 */}\r\n      <ul>\r\n        { movies.map((movie, i)=>{\r\n          return (\r\n            <li>\r\n              <Link to={`/${movie.id}`}>{movie.title}\r\n              {/* <h1>{movie.title}</h1> */}\r\n              </Link>\r\n              \r\n              {/* <Route path=\"/:id\">\r\n                <MovieDetail movie={movie}></MovieDetail>\r\n              </Route> */}\r\n              <BrowserRouter>\r\n              <Route path=\"/:id\" render={(props)=><MovieDetail movie={movie}/>} />\r\n              </BrowserRouter>\r\n              <img src={\"https://image.tmdb.org/t/p/w185\" + movie.poster_path} alt=\"\"/>\r\n              <p>{movie.overview}</p>\r\n            </li>\r\n          )\r\n        }) }\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default DetailPage\r\n","import React from \"react\"\nimport { BrowserRouter, Route } from \"react-router-dom\"\nimport DetailPage from \"./DetailPage\"\nimport MovieDetail from \"./MovieDetail\"\nimport title from \"./title\"\n\n\nconst App = () => {\n  const [movies, setMovies] = React.useState([])\n  return (\n    <>\n     <BrowserRouter>\n      <Route exact path='/' render={(props=><DetailPage  movies={movies} setMovies={setMovies} />)} ></Route>\n      \n      {/* <Route path=\"/:id/:title\" component={title} /> */}\n     </BrowserRouter>\n    </>\n  )\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}